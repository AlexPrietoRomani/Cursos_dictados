# Crear una lista con los factores y sus niveles
factores <- list(
Fertilizante = c("Orgánico", "Químico"),
Riego = c("Bajo", "Alto")
)
# Generar todas las combinaciones posibles de los niveles de los factores
# Utilizando la función expand.grid() para crear el diseño factorial completo
diseño_factorial <- expand.grid(factores)
# Mostrar el diseño factorial
print("Diseño Factorial 2^2:")
print(diseño_factorial)
# Añadir replicaciones al diseño
# Supongamos que tenemos 3 repeticiones por combinación de tratamiento
repeticiones <- 3
# Crear el diseño completo con replicaciones
diseño_factorial_completo <- diseño_factorial[rep(seq_len(nrow(diseño_factorial)), each = repeticiones), ]
# Añadir una columna de identificación para las unidades experimentales
diseño_factorial_completo$Unidad <- 1:nrow(diseño_factorial_completo)
# Mostrar el diseño completo con replicaciones
print("Diseño Factorial Completo con Replicaciones:")
print(diseño_factorial_completo)
# Simular datos de rendimiento (variable respuesta)
# Supongamos efectos aditivos de los factores y una interacción
# Establecer efectos de los factores
set.seed(123)  # Para reproducibilidad
efecto_fertilizante <- c(Orgánico = 50, Químico = 60)
efecto_riego <- c(Bajo = -5, Alto = 5)
interacción <- matrix(c(0, 5, -5, 0), nrow = 2, byrow = TRUE,
dimnames = list(c("Orgánico", "Químico"), c("Bajo", "Alto")))
# Generar los datos simulados
datos_simulados <- diseño_factorial_completo %>%
mutate(
# Obtener el efecto del fertilizante
efecto_fert = efecto_fertilizante[Fertilizante],
# Obtener el efecto del riego
efecto_rieg = efecto_riego[Riego],
# Obtener el efecto de la interacción
efecto_inter = mapply(function(fert, rieg) interacción[fert, rieg], Fertilizante, Riego),
# Calcular el rendimiento como la suma de los efectos más un error aleatorio
Rendimiento = efecto_fert + efecto_rieg + efecto_inter + rnorm(n(), mean = 0, sd = 2)
)
library(dplyr)                # Para manipulación de datos
library(ggplot2)              # Para visualizaciones
library(agricolae)            # Para diseños experimentales y análisis
library(car)                  # Para pruebas estadísticas
library(readr)                # Para leer y escribir archivos CSV
library(rstatix)              # Para pruebas estadísticas y comparaciones múltiples
library(FSA)                  # Para comparaciones de Dunn
library(userfriendlyscience)  # Para la prueba de Games-Howell
# Crear una lista con los factores y sus niveles
factores <- list(
Fertilizante = c("Orgánico", "Químico"),
Riego = c("Bajo", "Alto")
)
# Generar todas las combinaciones posibles de los niveles de los factores
# Utilizando la función expand.grid() para crear el diseño factorial completo
diseño_factorial <- expand.grid(factores)
# Mostrar el diseño factorial
print("Diseño Factorial 2^2:")
print(diseño_factorial)
# Añadir replicaciones al diseño
# Supongamos que tenemos 3 repeticiones por combinación de tratamiento
repeticiones <- 3
# Crear el diseño completo con replicaciones
diseño_factorial_completo <- diseño_factorial[rep(seq_len(nrow(diseño_factorial)), each = repeticiones), ]
# Añadir una columna de identificación para las unidades experimentales
diseño_factorial_completo$Unidad <- 1:nrow(diseño_factorial_completo)
# Mostrar el diseño completo con replicaciones
print("Diseño Factorial Completo con Replicaciones:")
print(diseño_factorial_completo)
# Simular datos de rendimiento (variable respuesta)
# Supongamos efectos aditivos de los factores y una interacción
# Establecer efectos de los factores
set.seed(123)  # Para reproducibilidad
efecto_fertilizante <- c(Orgánico = 50, Químico = 60)
efecto_riego <- c(Bajo = -5, Alto = 5)
interacción <- matrix(c(0, 5, -5, 0), nrow = 2, byrow = TRUE,
dimnames = list(c("Orgánico", "Químico"), c("Bajo", "Alto")))
# Generar los datos simulados
datos_simulados <- diseño_factorial_completo %>%
mutate(
# Obtener el efecto del fertilizante
efecto_fert = efecto_fertilizante[Fertilizante],
# Obtener el efecto del riego
efecto_rieg = efecto_riego[Riego],
# Obtener el efecto de la interacción
efecto_inter = mapply(function(fert, rieg) interacción[fert, rieg], Fertilizante, Riego),
# Calcular el rendimiento como la suma de los efectos más un error aleatorio
Rendimiento = efecto_fert + efecto_rieg + efecto_inter + rnorm(n(), mean = 0, sd = 2)
)
# Mostrar los datos simulados
print("Datos Simulados con Rendimiento:")
print(datos_simulados)
trt <- c(2, 2)  # Esto indica un factorial 2x2 (dos factores con dos niveles cada uno)
# Generar el diseño factorial en bloques completos al azar (RCBD) con 3 repeticiones
set.seed(123)
outdesign <- design.ab(trt = trt, r = 3, serie = 2, design = "rcbd", seed = 123)
# Imprimir el libro de campo (fieldbook)
print("Diseño Factorial 2x2:")
print(outdesign$book)
# **Cargar los paquetes necesarios**
if(!require(agricolae)){
install.packages("agricolae")
library(agricolae)
} else {
library(agricolae)
}
if(!require(car)){
install.packages("car")
library(car)
} else {
library(car)
}
# **Definir los tratamientos**
trt <- c(2, 2)  # Esto indica un factorial 2x2 (dos factores con dos niveles cada uno)
# **Generar el diseño factorial en bloques completos al azar (RCBD) con 3 repeticiones**
set.seed(123)
outdesign <- design.ab(trt = trt, r = 3, serie = 2, design = "rcbd", seed = 123)
# **Renombrar las columnas y los niveles de los factores**
# Cambiar los nombres de las columnas
names(outdesign$book) <- c("plots", "block", "Fertilizante", "Tipo_Suelo")
# Recodificar los niveles de los factores
outdesign$book$Fertilizante <- factor(outdesign$book$Fertilizante,
levels = c(1,2),
labels = c("Orgánico", "Convencional"))
outdesign$book$Tipo_Suelo <- factor(outdesign$book$Tipo_Suelo,
levels = c(1,2),
labels = c("Arenoso", "Franco Arenoso"))
# **Crear una columna para el tratamiento combinado**
outdesign$book$Tratamiento <- interaction(outdesign$book$Fertilizante, outdesign$book$Tipo_Suelo)
# **Definir las medias para cada combinación de tratamientos**
medias <- c("Orgánico.Arenoso" = 50,
"Orgánico.Franco Arenoso" = 55,
"Convencional.Arenoso" = 60,
"Convencional.Franco Arenoso" = 65)
# **Asignar los valores de Rendimiento asegurando normalidad y homogeneidad de varianzas**
set.seed(123)  # Para reproducibilidad
outdesign$book$Rendimiento <- rnorm(n = nrow(outdesign$book),
mean = medias[as.character(outdesign$book$Tratamiento)],
sd = 5)  # Usamos la misma desviación estándar para todos
# **Visualizar el dataset final**
print("Dataset final con Rendimiento:")
print(outdesign$book)
# Ajustar el modelo ANOVA
modelo <- aov(Rendimiento ~ Fertilizante * Tipo_Suelo + factor(block), data = outdesign$book)
# Obtener los residuos
residuos <- residuals(modelo)
# **Prueba de Normalidad (Shapiro-Wilk)**
shapiro_test <- shapiro.test(residuos)
print("Prueba de Shapiro-Wilk para normalidad de los residuos:")
print(shapiro_test)
# **Prueba de Homogeneidad de Varianzas (Levene)**
levene_test <- leveneTest(Rendimiento ~ Tratamiento, data = outdesign$book)
print("Prueba de Levene para homogeneidad de varianzas:")
print(levene_test)
# Histograma de los residuos
hist(residuos, main = "Histograma de Residuales", xlab = "Residuales", col = "lightblue")
# Gráfico Q-Q de los residuos
qqnorm(residuos, main = "Q-Q Plot de Residuales")
qqline(residuos, col = "red")
# Boxplot de Rendimiento por Tratamiento
boxplot(Rendimiento ~ Tratamiento, data = outdesign$book,
main = "Boxplot de Rendimiento por Tratamiento",
xlab = "Tratamiento", ylab = "Rendimiento")
# Guardar el dataset en formato CSV
write_csv(outdesign$book, "C:\\Users\\alexa\\OneDrive\\Documentos\\Cursos_dictados\\Curso_Cedepa_experimentales\\Datasets\\Factorial.csv")
# 1.3. ANOVA para diseños factoriales: interpretación
datos_simulados <- read_csv("Datasets/Factorial.csv")
# Ajustar el modelo ANOVA con interacción
anova_factorial <- aov(Rendimiento ~ Fertilizante * Riego, data = datos_simulados)
head(datos_simulados)
# Ajustar el modelo ANOVA con interacción
anova_factorial <- aov(Rendimiento ~ Fertilizante * Tipo_Suelo, data = datos_simulados)
# Mostrar el resumen del ANOVA
summary(anova_factorial)
# Calcular el coeficiente de variación (CV)
cv.model(anova_factorial)
# Obtener los residuales del modelo ANOVA
residuos <- residuals(anova_factorial)
# Realizar la prueba de Shapiro-Wilk
shapiro_test <- shapiro.test(residuos)
print("Prueba de Shapiro-Wilk para normalidad de los residuales:")
print(shapiro_test)
# Interpretación:
# - Si el valor p es mayor que 0.05, no se rechaza la hipótesis nula de normalidad.
# - Si el valor p es menor que 0.05, se rechaza la hipótesis de normalidad.
# Gráfico Q-Q de los residuales
qqnorm(residuos)
qqline(residuos, col = "red")
# 2.2. Prueba de homogeneidad de varianzas (bartlett)
# Realizar la prueba de bartlett
bartlett_test <- bartlett.test(Rendimiento ~ interaction(Fertilizante,Tipo_Suelo), data = datos_simulados)
print("Prueba de Levene para homogeneidad de varianzas:")
print(bartlett_test)
# Crear un gráfico de interacción utilizando ggplot2
interaction_plot <- ggplot(datos_simulados, aes(x = Fertilizante, y = Rendimiento, color = Tipo_Suelo, group = Tipo_Suelo)) +
stat_summary(fun = mean, geom = "point", size = 3) +  # Puntos de medias
stat_summary(fun = mean, geom = "line") +             # Líneas de medias
theme_minimal() +
labs(title = "Gráfico de Interacción entre Fertilizante y Riego",
x = "Tipo de Fertilizante",
y = "Rendimiento Promedio",
color = "Nivel de Riego")
# Mostrar el gráfico de interacción
print(interaction_plot)
# Prueba de Tukey para el efecto principal de Fertilizante
tukey_fert <- HSD.test(anova_factorial, "Fertilizante", group = TRUE)
print("Resultados de la Prueba de Tukey para Fertilizante:")
print(tukey_fert$groups)
# Prueba de Tukey para el efecto principal de Tipo_Suelo
tukey_riego <- HSD.test(anova_factorial, "Tipo_Suelo", group = TRUE)
print("Resultados de la Prueba de Tukey para Riego:")
print(tukey_riego$groups)
# Crear una nueva variable que combine los niveles de Fertilizante y Tipo_Suelo
datos_simulados <- datos_simulados %>%
mutate(Tratamiento = interaction(Fertilizante, Tipo_Suelo))
# Realizar ANOVA considerando la nueva variable de tratamiento
anova_interaccion <- aov(Rendimiento ~ Tratamiento, data = datos_simulados)
# Prueba de Tukey para las combinaciones de tratamientos
tukey_trat <- HSD.test(anova_interaccion, "Tratamiento", group = TRUE)
print("Resultados de la Prueba de Tukey para las Interacciones:")
print(tukey_trat$groups)
media_tratamientos <- datos_simulados %>%
group_by(Tratamiento) %>%
summarise(Media = mean(Rendimiento), SD = sd(Rendimiento)) %>%
left_join(tukey_trat$groups %>% rename(Tratamiento = Treatment), by = "Tratamiento")
install.packages("bookdown")
set.seed(123)
datos_altos <- rexp(100, rate = 0.1)  # Distribución exponencial (sesgada a la derecha)
# Visualizar histograma antes de la transformación
hist(datos_altos, main = "Datos Originales - Valores Altos", xlab = "Valor", col = "lightblue")
# Aplicar transformación logarítmica
datos_log <- log(datos_altos)
# Visualizar histograma después de la transformación
hist(datos_log, main = "Datos Transformados - Logarítmica", xlab = "Log(Valor)", col = "salmon")
# Comparar normalidad con gráficos Q-Q
par(mfrow = c(1, 2))
qqnorm(datos_altos, main = "Q-Q Plot Datos Originales")
qqline(datos_altos, col = "red")
qqnorm(datos_log, main = "Q-Q Plot Datos Transformados")
qqline(datos_log, col = "blue")
par(mfrow = c(1, 1))
